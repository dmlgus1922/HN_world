{"version":3,"sources":["StreamlitAudioRecorder_copy.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURL","reset","regis","render","theme","props","style","borderStyling","primaryColor","border","outline","className","onStop","onStop_audio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","id","onClick","onClick_start","controls","src","e","target","innerText","setState","RecordState","START","Streamlit","setComponentValue","STOP","onClick_regis","onClick_reset","onClick_continue","datetime","Date","toLocaleString","filename","replace","a","document","createElement","display","href","download","body","appendChild","click","data","url","fetch","then","ctx","blob","Response","arrayBuffer","buffer","Uint8Array","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","getElementById"],"mappings":"wQAmBMA,G,kNACGC,MAAQ,CACbC,WAAW,EAAOC,YAAa,KAC/BC,aAAc,GAAIC,OAAO,EACzBC,OAAO,G,EAGFC,OAAS,WAMd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAE3BP,EAAgB,EAAKF,MAArBE,YAGR,GAAIK,EAAO,CAGT,IAAMG,EAAa,oBAAgB,EAAKV,MAAMC,UAAYM,EAAMI,aAAe,QAC/EF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,oCACE,8BACE,yBAAKI,UAAU,mBACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEd,MAAOE,EACPa,OAAQ,EAAKC,aACbC,KAAK,YACLC,gBAAgB,qBAChBC,gBAAgB,iBAChBC,YAAa,GACbC,aAAc,MAIlB,6BACE,4BAAQC,GAAG,SAASC,QAAS,EAAKC,eAAlC,kBA4BJ,yBAAKV,UAAU,gBACb,2BACEQ,GAAG,QACHG,UAAQ,EACRC,IAAK,EAAK1B,MAAMG,mB,EAoBpBqB,cAAgB,SAACG,GACvB,GAA2B,iBAAvBA,EAAEC,OAAOC,UASX,OARA,EAAKC,SAAS,CACZ1B,OAAO,EACPD,aAAc,GACdD,YAAa6B,IAAYC,QAE3BC,IAAUC,kBAAkB,IAC5BP,EAAEC,OAAOC,UAAY,eACrBF,EAAEC,OAAON,GAAK,QACP,EAEP,EAAKQ,SAAS,CACZ1B,OAAO,EACPF,YAAa6B,IAAYI,KACzB9B,OAAO,IAETsB,EAAEC,OAAOC,UAAY,eACrBF,EAAEC,OAAON,GAAK,U,EAKVc,cAAgB,SAACT,K,EAWjBU,cAAgB,WACtB,EAAKP,SAAS,CACZ1B,OAAO,EACPD,aAAc,GACdD,YAAa6B,IAAYI,OAE3BF,IAAUC,kBAAkB,K,EAGtBI,iBAAmB,WACzB,GAAgC,KAA5B,EAAKtC,MAAMG,aAAqB,CAElC,IAAIoC,GAAW,IAAIC,MAAOC,iBAItBC,EAAW,oBADfH,GADAA,GADAA,EAAWA,EAASI,QAAQ,IAAK,KACbA,QAAQ,KAAM,KACdA,QAAQ,IAAK,KACc,OAGzCC,EAAIC,SAASC,cAAc,KACjCF,EAAEnC,MAAMsC,QAAU,OAClBH,EAAEI,KAAO,EAAKhD,MAAMG,aACpByC,EAAEK,SAAWP,EACbG,SAASK,KAAKC,YAAYP,GAC1BA,EAAEQ,U,EAIEpC,aAAe,SAACqC,IACG,IAArB,EAAKrD,MAAMI,OACb,EAAK0B,SAAS,CACZ3B,aAAc,KAEhB8B,IAAUC,kBAAkB,MAE5B,EAAKJ,SAAS,CACZ3B,aAAckD,EAAKC,MAGrBC,MAAMF,EAAKC,KAAKE,MAAK,SAAUC,GAC7B,OAAOA,EAAIC,UACVF,MAAK,SAAUE,GAGhB,OAAQ,IAAIC,SAASD,GAAOE,iBAC3BJ,MAAK,SAAUK,GAChB5B,IAAUC,kBAAkB,CAC1B,IAAO,IAAI4B,WAAWD,U,yBAjLPE,MA+LVC,cAAwBjE,GAKvCkC,IAAUgC,oBAIVhC,IAAUiC,iBCvNVC,IAAS7D,OACP,kBAAC,IAAM8D,WAAP,KACE,kBAAC,EAAD,OAGFvB,SAASwB,eAAe,W","file":"static/js/main.16d1fe41.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n  regis: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = {\n    isFocused: false, recordState: null,\n    audioDataURL: '', reset: false,\n    regis: false\n  }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <>\n        <span>\n          <div className=\"audio_rec_cover\">\n            <div className=\"audio_canvas\">\n              <AudioReactRecorder\n                state={recordState}\n                onStop={this.onStop_audio}\n                type='audio/wav'\n                backgroundColor='rgb(255, 255, 255)'\n                foregroundColor='rgb(255,76,75)'\n                canvasWidth={''}\n                canvasHeight={39}\n\n              />\n            </div>\n            <div>\n              <button id='record' onClick={this.onClick_start}>\n                녹음\n              </button>\n            </div>\n          </div>\n          {/* <br></br> */}\n          {/* <button id='stop' onClick={this.onClick_stop}\n            style={{display:'none'}}\n          >\n            Stop\n          </button> */}\n          {/* <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Download\n          </button> */}\n\n          {/* <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(255, 255, 255)'\n            foregroundColor='rgb(255,76,75)'\n            canvasWidth={165}\n            canvasHeight={40}\n          /> */}\n          <div className=\"audio_player\">\n            <audio\n              id='audio'\n              controls\n              src={this.state.audioDataURL}\n            />\n            {/* {\n            this.state.regis\n              ?\n              <button id='record' \n                style={{float: \"right\", marginRight:\"0\"}}\n                onClick={this.onClick_continue}\n                >등록</button>\n              :\n              <></>\n            } */}\n          </div>\n          \n        </span>\n      </>\n    )\n  }\n\n\n  private onClick_start = (e) => {\n    if (e.target.innerText === '녹음') {\n      this.setState({\n        reset: false,\n        audioDataURL: '',\n        recordState: RecordState.START\n      })\n      Streamlit.setComponentValue('')\n      e.target.innerText = '중지'\n      e.target.id = 'stop'\n      return true\n    } else {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP,\n        regis: true\n      })\n      e.target.innerText = '녹음'\n      e.target.id = 'record'\n    }\n    // console.log(e)\n  }\n\n  private onClick_regis = (e) => {\n\n  }\n\n  // private onClick_stop = () => {\n  //   this.setState({\n  //     reset: false,\n  //     recordState: RecordState.STOP\n  //   })\n  // }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '') {\n      // get datetime string for filename\n      let datetime = new Date().toLocaleString();\n      datetime = datetime.replace(' ', '');\n      datetime = datetime.replace(/_/g, '');\n      datetime = datetime.replace(',', '');\n      var filename = 'streamlit_audio_' + datetime + '.wav';\n\n      // auromatically trigger download\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = this.state.audioDataURL;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true) {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    } else {\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      fetch(data.url).then(function (ctx) {\n        return ctx.blob()\n      }).then(function (blob) {\n        // converting blob to arrayBuffer, this process step needs to be be improved\n        // this operation's time complexity scales exponentially with audio length\n        return (new Response(blob)).arrayBuffer()\n      }).then(function (buffer) {\n        Streamlit.setComponentValue({\n          \"arr\": new Uint8Array(buffer)\n        })\n      })\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n// export default StAudioRec\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder_copy\"\n// import Test from \"./Test\"\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n    {/* <Test /> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}